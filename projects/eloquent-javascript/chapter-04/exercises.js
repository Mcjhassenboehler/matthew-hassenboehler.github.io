////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step=1) {
  let array=[];
      if (start === end){
        return [];
      }
      if (step == 0) {
        for(let i = start; i<= end; i++) {
        array.push(i);
      }}else if(step > 0 ) {
        for(let i = start; i<= end; i+=step) {
        array.push(i);
      }} else if(step <0) {
        for(let i = start; i>= end; i+=step){
      array.push(i);
      }}
  	  return array;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let sum1 = 0;
  for (let i = 0; i < array.length; i++){
    sum1 += array[i]
  }
  return sum1
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let arr2 = [];
  for (let i = 0; i < array.length; i++){
    arr2.unshift(array[i])
  }
  return arr2
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (let i = 0; i < array.length / 2; i++){
    let index = array.length - (i + 1)
    let start = array[i];
    let end = array[index]
    array[i] = end;
    array[index] = start
  }
  return array
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for (let i = array.length -1; i >= 0; i--){
    list = {value: array[i], rest: list}
  }
  return list
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(obj, list=[]) {
  if (obj.rest === null){
    list.push(obj.value)
    return list
  }
  list.push(obj.value)
  return listToArray(obj.rest, list)
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return { value: element, rest: list };
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
  if (number < 0 || !list){
    return undefined
  }else if (number === 0) {
    return list.value;
  } else {
    return nth(list.rest, number - 1);
  }
}


////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
// Determine if BOTH x and y are not objects
if (typeof x !== 'object' && typeof y !== 'object'){
  return x === y;
}
// Determine if one of the values is still not an object
if (typeof x !== 'object' || typeof y !== 'object'){
  return false;
}
let xKeys = Object.keys(x);
let yKeys = Object.keys(y);
if (xKeys.length !== yKeys.length){
  return false;
}
for (let i = 0; i < xKeys.length; i++){
  if (!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
    return false;
  }
}
return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
